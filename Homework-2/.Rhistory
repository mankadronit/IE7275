library(reshape2)
library(fitdistrplus)
library(scatterplot3d)
library(plotrix)
library(RColorBrewer)
# Import the Dataframe
forestfires <- data.frame(read.csv("./data/forestfires.csv"),
stringsAsFactors = FALSE
)
# Convert the month column into factors and sort from Jan-Dec
forestfires$month <- factor(forestfires$month,
levels = c(
"jan", "feb", "mar",
"apr", "may", "jun",
"jul", "aug", "sep",
"oct", "nov", "dec"
)
)
# Create 4 scatter plots
p1 <- ggplot(forestfires, aes(temp, area)) +
geom_point(color = "#d63447", alpha = 0.5) +
ggtitle("Temp vs Area") +
theme_classic()
p2 <- ggplot(forestfires, aes(month, area, color = month)) +
geom_point() +
scale_color_brewer(palette = "Set3") +
theme_classic() +
theme(legend.position = "none") +
ggtitle("Month vs Area")
p3 <- ggplot(forestfires, aes(DC, area)) +
geom_point(color = "#d63447", alpha = 0.5) +
ggtitle("DC vs Area") +
theme_classic()
p4 <- ggplot(forestfires, aes(RH, area)) +
geom_point(color = "#d63447", alpha = 0.5) +
ggtitle("RH vs Area") +
theme_classic()
# Arrange plots P1-P4 into a 2x2 grid
plot_grid(p1, p2, p3, p4)
rm(list = c("p1", "p2", "p3", "p4", "fig"))
# Import the Dataframe
forestfires <- data.frame(read.csv("./data/forestfires.csv"),
stringsAsFactors = FALSE
)
# Convert the month column into factors and sort from Jan-Dec
forestfires$month <- factor(forestfires$month,
levels = c(
"jan", "feb", "mar",
"apr", "may", "jun",
"jul", "aug", "sep",
"oct", "nov", "dec"
)
)
# Create 4 scatter plots
p1 <- ggplot(forestfires, aes(temp, area)) +
geom_point(color = "#d63447", alpha = 0.5) +
ggtitle("Temp vs Area") +
theme_classic()
p2 <- ggplot(forestfires, aes(month, area, color = month)) +
geom_point() +
scale_color_brewer(palette = "Set3") +
theme_classic() +
theme(legend.position = "none") +
ggtitle("Month vs Area")
p3 <- ggplot(forestfires, aes(DC, area)) +
geom_point(color = "#d63447", alpha = 0.5) +
ggtitle("DC vs Area") +
theme_classic()
p4 <- ggplot(forestfires, aes(RH, area)) +
geom_point(color = "#d63447", alpha = 0.5) +
ggtitle("RH vs Area") +
theme_classic()
# Arrange plots P1-P4 into a 2x2 grid
plot_grid(p1, p2, p3, p4)
rm(list = c("p1", "p2", "p3", "p4"))
# Create the Wind-Historgram
wind_hist <- ggplot(forestfires, aes(wind)) +
geom_histogram(bins = 10, fill = "#08d9d6", color = "black") +
theme_classic() +
ggtitle("Histogram of Wind Speed") +
labs(x = "Wind Speed (km/hour)")
# Plot
plot(wind_hist)
rm(wind_hist)
# Calculate the Quantiles
quantiles <- quantile(forestfires$wind)
# Print
cat("Minimum Wind Speed is :", quantiles[[1]], "\n")
cat("1st Quantile of Wind Speed is :", quantiles[[2]], "\n")
cat("Mean Wind Speed is :", mean(forestfires$wind), "\n")
cat("Median Wind Speed is :", quantiles[[3]], "\n")
cat("3rd Quartile of Wind Speed is :", quantiles[[4]], "\n")
cat("Maximum Wind Speed is :", quantiles[[5]], "\n")
rm(quantiles)
# Create the Histogram and Density Plot
wind_hist_plus_density <- ggplot(forestfires, aes(x = wind, y = ..density..)) +
geom_histogram(bins = 10, colour = "black", fill = "#08d9d6") +
geom_density(aes(y = ..density..), color = "black") +
ylab("Density") +
xlab("Wind Speed (km/hour)") +
ggtitle("Histogram of Wind Speed") +
theme_bw()
plot(wind_hist_plus_density)
rm(wind_hist_plus_density)
# Create month wise density plot
month_density_plot <- ggplot(forestfires, aes(
x = wind,
y = ..density..,
fill = month
)) +
geom_density(alpha = 0.8) +
scale_fill_brewer(palette = "Set3") +
theme_classic() +
ggtitle("Wind Speed Density Plots for each month") +
labs(x = "Wind Speed (km/hour)", y = "Density", fill = "Month") +
scale_x_continuous(expand = c(0, 0), limits = c(0, NA)) +
scale_y_continuous(expand = c(0, 0), limits = c(0, NA))
plot(month_density_plot)
rm(month_density_plot)
# Plot ScatterMatrix
ggpairs(forestfires,
title = "Scatterplot Matrix",
columns = c("temp", "RH", "DC", "DMC")
)
# Create a temporary dataframe and reshape it
suppressMessages({
df <- melt(forestfires)
})
# Plot 3 boxplots for Wind, ISI, and DC
ggplot(df %>% filter(variable == "wind"), aes(x = variable, y = value, fill = variable)) +
geom_boxplot() +
theme_classic() +
theme(
legend.position = "none",
axis.ticks.x = element_blank(),
axis.text.x = element_blank()
) +
ggtitle("Wind Speed Box Plot") +
labs(x = "Wind Speed", y = "Value")
ggplot(df %>% filter(variable == "ISI"), aes(x = variable, y = value, fill = variable)) +
geom_boxplot() +
theme_classic() +
theme(
legend.position = "none",
axis.ticks.x = element_blank(),
axis.text.x = element_blank()
) +
ggtitle("ISI Box Plot") +
labs(x = "ISI", y = "Value")
ggplot(df %>% filter(variable == "DC"), aes(x = variable, y = value, fill = variable)) +
geom_boxplot() +
theme_classic() +
theme(
legend.position = "none",
axis.ticks.x = element_blank(),
axis.text.x = element_blank()
) +
ggtitle("DC Box Plot") +
labs(x = "DC", y = "Value")
rm(df)
# Plot normal histogram
ggplot(forestfires, aes(DMC)) +
geom_histogram(binwidth = 50, color = "black", fill = "#08d9d6") +
theme_classic() +
ggtitle("DMC Histogram")
# Plot log scale histogram
ggplot(forestfires, aes(log10(DMC))) +
geom_histogram(bins = 8, color = "black", fill = "#08d9d6") +
theme_classic() +
ggtitle("LOG DMC Histogram") +
scale_x_log10()
# Import the Twitter Data csv
M01_quasi_twitter <- data.frame(read.csv("./data/M01_quasi_twitter.csv"))
# Filter out negative values
friends_count <- filter(M01_quasi_twitter, friends_count > 0)
# Since the data is skewed, we can't plot the normal histogram.
# So we plot the log scale histogram
ggplot(friends_count, aes(log10(friends_count))) +
geom_histogram(color = "black", fill = "#08d9d6") +
scale_x_log10()
# Use the descdist function from the fitdistrplus package to fit a distribution
descdist(friends_count$friends_count)
# Let's try and verify these observations
fit_lnorm <- fitdist(friends_count$friends_count, "lnorm")
# Plot goodness-of-fit plots
plot(fit_lnorm)
rm(friends_count, fit_lnorm)
# Calculate the Quantiles
quantiles <- quantile(M01_quasi_twitter$friends_count)
# Print
cat("Minimum friends_count is :", quantiles[[1]], "\n")
cat("1st Quantile of friends_count is :", quantiles[[2]], "\n")
cat("Mean friends_count is :", mean(M01_quasi_twitter$friends_count), "\n")
cat("Median friends_count is :", quantiles[[3]], "\n")
cat("3rd Quartile of friends_count is :", quantiles[[4]], "\n")
cat("Maximum friends_count is :", quantiles[[5]], "\n")
rm(quantiles)
# Create and Plot the 3D Scatter Plot
scatterplot3d(
x = M01_quasi_twitter$created_at_year,
y = M01_quasi_twitter$education,
z = M01_quasi_twitter$age,
main = "3D scatter plot",
xlab = "created_at_year",
ylab = "education",
zlab = "age",
highlight.3d = TRUE
)
# Create a temporary dataframe for the data
df <- data.frame(
"country" = c("UK", "Canada", "India", "Australia", "US"),
"num_accounts" = c(650, 1000, 900, 300, 14900)
)
# Mutate the dataframe to create a percentages columns
df <- df %>%
group_by(country) %>%
arrange(desc(country)) %>%
mutate(prop = 100 * round(num_accounts / sum(df$num_accounts), 3)) %>%
mutate(percentage_labels = paste0(prop, "%"))
# Define the grid, 1 row x 2 columns
par(mfcol = c(1, 2), mar = c(5, 5, 5, 5))
# 3D Pie chart
pie3D(df$prop,
radius = 0.9,
labels = df$country,
main = "Country 3D Pie Chart"
)
# Regular Pie Chart
pie(df$prop,
labels = paste0(df$country, " ", df$percentage_labels),
col = brewer.pal(5, "Dark2"),
cex = 1
)
rm(df)
ggplot(M01_quasi_twitter, aes(x = created_at_year)) +
geom_density() +
scale_x_continuous(
breaks = c(
2006, 2007, 2008,
2009, 2010, 2011,
2012, 2013, 2014,
2015, 2016, 2017
),
labels = c(
"2006", "2007", "2008",
"2009", "2010", "2011",
"2012", "2013", "2014",
"2015", "2016", "2017"
)
)
# Import the raw_data.csv file
raw_data <- data.frame(read.csv("./data/raw_data.csv"), stringsAsFactors = FALSE)
# Standardize the data frame using the scale function
Ndata <- as.data.frame(scale(raw_data))
# Reshape the dataframe to a shape suitable for plotting
df <- melt(raw_data)
# Create box plots
ggplot(df, aes(variable, value, fill = "value")) +
geom_boxplot() +
theme_classic() +
ggtitle("Box Plot for raw_data") +
labs(x = "") +
theme(legend.position = "none")
rm(df)
# Reshape the dataframe to a shape suitable for plotting
df <- melt(Ndata)
# Create box plots
ggplot(df, aes(variable, value, fill = "value")) +
geom_boxplot() +
theme_classic() +
ggtitle("Box Plot for Ndata") +
labs(x = "") +
theme(legend.position = "none")
rm(df)
# Creating the scatterplots
ggplot(raw_data, aes(A, B)) +
geom_point() +
ggtitle("Scatterplot of A and B")
setwd("C:\\Users\\manka\\Documents\\IE7275\\Homework-2")
knitr::opts_chunk$set(echo = TRUE)
library(dplyr)
library(readxl)
library(dplyr)
library(readxl)
NHL <- read_xlsx("./data/NHL.xlsx", sheet = "data")
NHL <- read_xlsx("./data/NHL.xlsx", sheet = "Data")
NHL <- read_xlsx("./data/NHL.xlsx", sheet = "Data")
typeof(NHL)
NHL <- data.frame(read_xlsx("./data/NHL.xlsx", sheet = "Data"))
View(NHL)
NHL <- data.frame(read_xlsx("./data/NHL.xlsx", sheet = "Data"))
library(dplyr)
library(readxl)
NHL <- data.frame(read_xlsx("./data/NHL.xlsx", sheet = "Data"))
NHL <- read_xlsx("./data/NHL.xlsx", sheet = "Data")
# Select the columns 13-26, the 1st column is the index column from excel
NHL <- NHL[, 13:26]
library(dplyr)
library(readxl)
library(psych)
install.packages("psych")
library(dplyr)
library(readxl)
library(psych)
# Import the NHL excel file as a dataframe
NHL <- data.frame(read_xlsx("./data/NHL.xlsx", sheet = "Data"))
# Select the columns 13-26, the 1st column is the index column from excel
NHL <- NHL[, 13:26]
# Import the NHL excel file as a dataframe
suppressWarnings({
NHL <- data.frame(read_xlsx("./data/NHL.xlsx", sheet = "Data"))
})
# Select the columns 13-26, the 1st column is the index column from excel
NHL <- NHL[, 13:26]
# Import the NHL excel file as a dataframe
NHL <- data.frame(read_xlsx("./data/NHL.xlsx", sheet = "Data"))
# Select the columns 13-26, the 1st column is the index column from excel
NHL <- NHL[, 13:26]
# Import the NHL excel file as a dataframe
NHL <- data.frame(read_xlsx("./data/NHL.xlsx", sheet = "Data"))
# Select the columns 13-26, the 1st column is the index column from excel
df <- NHL[, 13:26]
# Import the NHL excel file as a dataframe
NHL <- data.frame(read_xlsx("./data/NHL.xlsx", sheet = "Data"))
# Select the columns 13-26, the 1st column is the index column from excel
df <- NHL[, 13:26]
fa.parallel(df, fa = "pc", main = "PCA of the NHL data")
# Import the NHL excel file as a dataframe
NHL <- data.frame(read_xlsx("./data/NHL.xlsx", sheet = "Data"))
# Select the columns 13-26, the 1st column is the index column from excel
df <- NHL[, 13:26]
fa.parallel(df, fa = "pc")
# Import the NHL excel file as a dataframe
NHL <- data.frame(read_xlsx("./data/NHL.xlsx", sheet = "Data"))
# Select the columns 13-26, the 1st column is the index column from excel
df <- NHL[, 13:26]
fa.parallel(df, fa = "pc")
principal(df, nfactors = 3, residuals = FALSE)
# Import the NHL excel file as a dataframe
NHL <- data.frame(read_xlsx("./data/NHL.xlsx", sheet = "Data"))
# Select the columns 13-26, the 1st column is the index column from excel
df <- NHL[, 13:26]
fa.parallel(df, fa = "pc", niter = 100)
# Import the NHL excel file as a dataframe
NHL <- data.frame(read_xlsx("./data/NHL.xlsx", sheet = "Data"))
# Select the columns 13-26, the 1st column is the index column from excel
df <- NHL[, 13:26]
fa.parallel(df, fa = "pc", n.iter = 100, show.legend = FALSE)
# Import the NHL excel file as a dataframe
NHL <- data.frame(read_xlsx("./data/NHL.xlsx", sheet = "Data"))
# Select the columns 13-26, the 1st column is the index column from excel
df <- NHL[, 13:26]
fa.parallel(df, fa = "PC", n.iter = 100, show.legend = FALSE)
# Import the NHL excel file as a dataframe
NHL <- data.frame(read_xlsx("./data/NHL.xlsx", sheet = "Data"))
# Select the columns 13-26, the 1st column is the index column from excel
df <- NHL[, 13:26]
fa.parallel(df, fa = "pc", n.iter = 100, show.legend = FALSE)
pc <- principal(df, nfactors = 3)
# Import the NHL excel file as a dataframe
NHL <- data.frame(read_xlsx("./data/NHL.xlsx", sheet = "Data"))
# Select the columns 13-26, the 1st column is the index column from excel
df <- NHL[, 13:26]
fa.parallel(df, fa = "pc", n.iter = 100, show.legend = FALSE)
pc <- principal(df, nfactors = 3)
pc <- principal(df, nfactors = 3)
pc
View(pc)
pc <- principal(df, nfactors = 3, rotate = "none")
pc
print(pc)
pc <- principal(df, nfactors = 3, rotate = "none")
pc
str(pc)
pc <- principal(df, nfactors = 3, rotate = "none")
pc
pc <- principal(df, nfactors = 4, rotate = "none")
pc
pc <- principal(df, nfactors = 5, rotate = "none")
pc
pc <- principal(df, nfactors = 4, rotate = "none")
pc
pc <- principal(df, nfactors = 4, rotate = "varimax")
pc
pc <- principal(df, nfactors = 3, rotate = "varimax")
pc
pc <- principal(df, nfactors = 5, rotate = "varimax")
pc
pc <- principal(df, nfactors = 1, rotate = "varimax")
pc
pc <- principal(df, nfactors = 3, rotate = "varimax")
pc
pc <- principal(df, nfactors = 3, rotate = "varimax", scores = TRUE)
pc
pc$scores
View(df)
cor(df$gg, pc$scores)
# Import the NHL excel file as a dataframe
NHL <- data.frame(read_xlsx("./data/NHL.xlsx", sheet = "Data"))
# Select the columns 13-26, the 1st column is the index column from excel
df <- NHL[, 13:26]
fa.parallel(df, fa = "pc", n.iter = 100, show.legend = FALSE)
pc <- principal(df, nfactors = 3, rotate = "varimax", scores = TRUE)
pc
fa.plot(pc)
library(dplyr)
library(readxl)
library(psych)
library(ggbiplot)
library(dplyr)
library(readxl)
library(psych)
install_github("vqv/ggbiplot")
library(dplyr)
library(readxl)
library(psych)
devtools::install_github("vqv/ggbiplot")
install.packages("devtools")
library(dplyr)
library(readxl)
library(psych)
library(devtools)
devtools::install_github("vqv/ggbiplot")
library(ggbiplot)
library(dplyr)
library(readxl)
library(psych)
library(ggbiplot)
ggbiplot(pc)
fa.diagram(pc)
fa <- fa.parallel(df, fa = "pc", n.iter = 100, show.legend = FALSE)
# Import the NHL excel file as a dataframe
NHL <- data.frame(read_xlsx("./data/NHL.xlsx", sheet = "Data"))
# Select the columns 13-26, the 1st column is the index column from excel
df <- NHL[, 13:26]
fa <- fa.parallel(df, fa = "pc", n.iter = 100, show.legend = FALSE)
pc <- principal(df, nfactors = 3, rotate = "varimax", scores = TRUE)
pc
fa.diagram(fa)
# Import the NHL excel file as a dataframe
NHL <- data.frame(read_xlsx("./data/NHL.xlsx", sheet = "Data"))
# Select the columns 13-26, the 1st column is the index column from excel
df <- NHL[, 13:26]
fa.promax <- fa.parallel(df, fa = "pc", n.iter = 100, show.legend = FALSE)
fa.diagram(fa.promax)
pc <- principal(df, nfactors = 3, rotate = "varimax", scores = TRUE)
pc
pc$scores
factor.plot(pc$scores)
factor.plot(pc)
factor.plot(pcscores)
factor.plot(pc$scores)
factor.plot(pc)
factor.plot(pc$loadings)
factor.plot(pc$factors)
factor.plot(pc)
factor.plot(pc$loadings)
factor.plot(pc)
factor.plot(fa(df))
factor.plot(fa(df), labels = colnames(df))
fa.diagram(pc)
fa.diagram(fa(df))
fa.diagram(fa(df, nfactors = 3))
fa.diagram(fa(df, nfactors = 3, rotate = "varimax", fm = "pa"))
fa.diagram(fa(df, nfactors = 3, rotate = "varimax", fm = "pa"), simple = FALSE)
factor.plot(pc)
pc <- principal(df, nfactors = 1, rotate = "varimax", scores = TRUE)
pc
factor.plot(pc)
pc <- principal(df, nfactors = 3, rotate = "varimax", scores = TRUE)
pc
factor.plot()
factor.plot(pc)
factor.plot(pc$values)
factor.plot(pc$rotation)
factor.plot(pc$loadings)
factor.plot(pc$scores)
factor.plot(pc)
pc <- principal(df, nfactors = 1, rotate = "varimax", scores = TRUE)
pc <- principal(df, nfactors = 1, rotate = "varimax", scores = TRUE)
pc
factor.plot(pc)
factor.plot(pc$loadings)
factor.plot(pc$lo)
factor.plot(pc)
factor.plot(pc$loadings)
pc$loadings
pc <- principal(df, nfactors = 3, rotate = "varimax", scores = TRUE)
pc
factor.plot(pc)
pc$loadings
pc$loadings[1]
pc$loadings
pc$loadings$RC1
typeof(pc$loadings)
str(pc$loadings)
factor.plot(pc, choose = c(1))
factor.plot(pc, choose = c(2))
factor.plot(pc, choose = c(3))
factor.plot(pc, choose = c(1), labels = colnames(df))
factor.plot(pc, choose = c(1), labels = colnames(df))
factor.plot(pc, choose = c(2), labels = colnames(df))
factor.plot(pc, choose = c(3), labels = colnames(df))
factor.plot(pc, choose = c(1), labels = colnames(df), "PCA Component 1")
factor.plot(pc, choose = c(1), labels = colnames(df), title = "PCA Component 1")
factor.plot(pc, choose = c(2), labels = colnames(df), title = "PCA Component 2")
factor.plot(pc, choose = c(3), labels = colnames(df), title = "PCA Component 3")
pc <- principal(df, nfactors = 2, rotate = "varimax", scores = TRUE)
pc
factor.plot(pc)
pc <- principal(df, nfactors = 3, rotate = "varimax", scores = TRUE)
pc
